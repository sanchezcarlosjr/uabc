(require "test.lisp")
(defun join (setA setB) 
  (remove-duplicates (append setA setB))
)
(defun diff (setA setB)
  (reduce #'(lambda (acc actual) (remove actual acc)) setB :initial-value (append setA setB))
)
(defun intersect (setA setB)
  (setf setAOrB (join setA setB))
  (setf setAOrB (diff setAOrB (diff setAOrB setA)))
  (diff setAOrB (diff setAOrB setB))
)
(defun subset (setA setB)
  (cond 
    ((null setA) T)
    ((null setB) NIL)
    (t (> (length (intersect setA setB)) 0))
  )
)
(test '(1) #'diff  '(1 2 3) '(2 3 4 5))
(test '(1 2 3 4 5) #'join '(1 2 3) '(2 3 4 5))
(test '(2 3) #'intersect '(1 2 3) '(2 3 4))
(print (subset '(1 3) '(1 2 3 4)))
(print (subset '() '(1 2)))
(print (subset '(3) '(1 2)))
